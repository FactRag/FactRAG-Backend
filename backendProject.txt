This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-01T19:37:12.736Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
authentication/
  migrations/
    0001_initial.py
  admin.py
  apps.py
  middleware.py
  models.py
  serializers.py
  tests.py
  urls.py
  views.py
core/
  asgi.py
  settings.py
  urls.py
  wsgi.py
feedback/
  migrations/
    0001_initial.py
    0002_feedbackvote_alter_feedback_options_and_more.py
    0003_alter_feedback_options_and_more.py
    0004_remove_feedback_updated_at_and_more.py
  admin.py
  apps.py
  models.py
  serializers.py
  tests.py
  urls.py
  views.py
django_project.json
manage.py
project.json
requirements.txt

================================================================
Repository Files
================================================================

================
File: authentication/migrations/0001_initial.py
================
# Generated by Django 5.1.3 on 2024-11-29 13:05

import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('username', models.CharField(max_length=150, unique=True)),
                ('avatar', models.URLField(blank=True, max_length=500)),
                ('provider', models.CharField(blank=True, max_length=50)),
                ('provider_id', models.CharField(blank=True, max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]

================
File: authentication/admin.py
================
from django.contrib import admin

# Register your models here.

================
File: authentication/apps.py
================
from django.apps import AppConfig


class AuthenticationConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'authentication'

================
File: authentication/middleware.py
================
# authentication/middleware.py
from django.utils.functional import SimpleLazyObject
from rest_framework_simplejwt.authentication import JWTAuthentication
from django.contrib.auth.middleware import get_user

def jwt_auth_middleware(get_response):
    def middleware(request):
        request.user = SimpleLazyObject(lambda: get_user_from_token(request))
        return get_response(request)

    return middleware

def get_user_from_token(request):
    user = get_user(request)
    if user.is_authenticated:
        return user

    jwt_auth = JWTAuthentication()
    try:
        auth_header = request.headers.get('Authorization')
        if auth_header and auth_header.startswith('Bearer '):
            validated_token = jwt_auth.get_validated_token(auth_header.split(' ')[1])
            user = jwt_auth.get_user(validated_token)
            if user:
                return user
    except:
        pass

    return user

================
File: authentication/models.py
================
from django.db import models
from django.contrib.auth.models import AbstractUser, BaseUserManager

class CustomUserManager(BaseUserManager):
    def create_user(self, email, username, password=None, **extra_fields):
        if not email:
            raise ValueError('Email is required')
        email = self.normalize_email(email)
        user = self.model(email=email, username=username, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, username, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        return self.create_user(email, username, password, **extra_fields)

class User(AbstractUser):
    email = models.EmailField(unique=True)
    username = models.CharField(max_length=150, unique=True)
    avatar = models.URLField(max_length=500, blank=True)
    provider = models.CharField(max_length=50, blank=True)  # 'google' or 'orcid'
    provider_id = models.CharField(max_length=100, blank=True)

    objects = CustomUserManager()

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['username']

================
File: authentication/serializers.py
================
# authentication/serializers.py
from rest_framework import serializers
from django.contrib.auth import get_user_model
from django.contrib.auth.password_validation import validate_password

User = get_user_model()

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ('id', 'email', 'username', 'avatar')

class RegisterSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True, required=True, validators=[validate_password])
    password2 = serializers.CharField(write_only=True, required=True)

    class Meta:
        model = User
        fields = ('email', 'username', 'password', 'password2')

    def validate(self, attrs):
        if attrs['password'] != attrs['password2']:
            raise serializers.ValidationError({"password": "Passwords don't match"})
        return attrs

    def create(self, validated_data):
        user = User.objects.create_user(
            email=validated_data['email'],
            username=validated_data['username'],
            password=validated_data['password']
        )
        return user

class LoginSerializer(serializers.Serializer):
    email = serializers.EmailField(required=True)
    password = serializers.CharField(required=True, write_only=True)

================
File: authentication/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: authentication/urls.py
================
from django.urls import path
from . import views
from rest_framework_simplejwt.views import TokenRefreshView

urlpatterns = [
    path('register/', views.register, name='register'),
    path('login/', views.login, name='login'),
    path('logout/', views.logout, name='logout'),
    path('profile/', views.user_profile, name='profile'),
    path('token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
    
    path('google/login/', views.google_login, name='google_login'),
    path('google/callback/', views.google_callback, name='google_callback'),
    path('orcid/login/', views.orcid_login, name='orcid_login'),
    path('orcid/callback/', views.orcid_callback, name='orcid_callback'),
]

================
File: authentication/views.py
================
# authentication/views.py
import requests
from jose import jwt
from django.conf import settings
from django.shortcuts import redirect

from rest_framework import status
from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from rest_framework.permissions import AllowAny, IsAuthenticated
from rest_framework_simplejwt.tokens import RefreshToken
from django.contrib.auth import authenticate
from core.settings import AUTH_USER_MODEL as User
from .serializers import UserSerializer, RegisterSerializer, LoginSerializer

@api_view(['POST'])
@permission_classes([AllowAny])
def register(request):
    serializer = RegisterSerializer(data=request.data)
    if serializer.is_valid():
        user = serializer.save()
        refresh = RefreshToken.for_user(user)
        return Response({
            'user': UserSerializer(user).data,
            'tokens': {
                'refresh': str(refresh),
                'access': str(refresh.access_token),
            }
        }, status=status.HTTP_201_CREATED)
    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

@api_view(['POST'])
@permission_classes([AllowAny])
def login(request):
    serializer = LoginSerializer(data=request.data)
    if serializer.is_valid():
        user = authenticate(
            email=serializer.validated_data['email'],
            password=serializer.validated_data['password']
        )
        if user:
            refresh = RefreshToken.for_user(user)
            return Response({
                'user': UserSerializer(user).data,
                'tokens': {
                    'refresh': str(refresh),
                    'access': str(refresh.access_token),
                }
            })
        return Response({'error': 'Invalid credentials'}, status=status.HTTP_401_UNAUTHORIZED)
    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def user_profile(request):
    serializer = UserSerializer(request.user)
    return Response(serializer.data)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def logout(request):
    try:
        refresh_token = request.data["refresh"]
        token = RefreshToken(refresh_token)
        token.blacklist()
        return Response(status=status.HTTP_205_RESET_CONTENT)
    except Exception:
        return Response(status=status.HTTP_400_BAD_REQUEST)

@api_view(['GET'])
@permission_classes([AllowAny])
def google_login(request):
    redirect_uri = request.build_absolute_uri('/api/auth/google/callback')
    return Response({
        'auth_url': f'https://accounts.google.com/o/oauth2/v2/auth?'
                    f'client_id={settings.SOCIAL_AUTH_GOOGLE_OAUTH2_KEY}&'
                    f'response_type=code&'
                    f'scope=email profile&'
                    f'redirect_uri={redirect_uri}'
    })

@api_view(['GET'])
@permission_classes([AllowAny])
def google_callback(request):
    code = request.GET.get('code')
    redirect_uri = request.build_absolute_uri('/api/auth/google/callback')

    # Exchange code for access token
    token_response = requests.post(
        'https://oauth2.googleapis.com/token',
        data={
            'code': code,
            'client_id': settings.SOCIAL_AUTH_GOOGLE_OAUTH2_KEY,
            'client_secret': settings.SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET,
            'redirect_uri': redirect_uri,
            'grant_type': 'authorization_code'
        }
    )

    if not token_response.ok:
        return Response({'error': 'Failed to get token'}, status=status.HTTP_400_BAD_REQUEST)

    # Get user info
    access_token = token_response.json()['access_token']
    user_info = requests.get(
        'https://www.googleapis.com/oauth2/v2/userinfo',
        headers={'Authorization': f'Bearer {access_token}'}
    ).json()

    # Get or create user
    try:
        user = User.objects.get(email=user_info['email'])
    except User.DoesNotExist:
        user = User.objects.create_user(
            email=user_info['email'],
            username=user_info['email'].split('@')[0],
            provider='google',
            provider_id=user_info['id'],
            avatar=user_info.get('picture', '')
        )

    # Generate JWT tokens
    refresh = RefreshToken.for_user(user)
    tokens = {
        'refresh': str(refresh),
        'access': str(refresh.access_token)
    }

    # Redirect to frontend with tokens
    frontend_url = settings.FRONTEND_URL
    return redirect(f'{frontend_url}/auth/callback?tokens={jwt.encode(tokens, settings.SECRET_KEY)}')

@api_view(['GET'])
@permission_classes([AllowAny])
def orcid_login(request):
    redirect_uri = request.build_absolute_uri('/api/auth/orcid/callback')
    return Response({
        'auth_url': f'{settings.ORCID_AUTH_URL}?'
                    f'client_id={settings.ORCID_CLIENT_ID}&'
                    f'response_type=code&'
                    f'scope=/authenticate&'
                    f'redirect_uri={redirect_uri}'
    })

@api_view(['GET'])
@permission_classes([AllowAny])
def orcid_callback(request):
    code = request.GET.get('code')
    redirect_uri = request.build_absolute_uri('/api/auth/orcid/callback')

    # Exchange code for access token
    token_response = requests.post(
        settings.ORCID_TOKEN_URL,
        data={
            'code': code,
            'client_id': settings.ORCID_CLIENT_ID,
            'client_secret': settings.ORCID_CLIENT_SECRET,
            'redirect_uri': redirect_uri,
            'grant_type': 'authorization_code'
        }
    )

    if not token_response.ok:
        return Response({'error': 'Failed to get token'}, status=status.HTTP_400_BAD_REQUEST)

    token_data = token_response.json()
    orcid_id = token_data['orcid']

    # Get ORCID profile
    profile_response = requests.get(
        f'{settings.ORCID_BASE_URL}/v3.0/{orcid_id}/person',
        headers={'Authorization': f'Bearer {token_data["access_token"]}'}
    )

    if not profile_response.ok:
        return Response({'error': 'Failed to get profile'}, status=status.HTTP_400_BAD_REQUEST)

    profile = profile_response.json()

    # Get or create user
    try:
        user = User.objects.get(provider_id=orcid_id)
    except User.DoesNotExist:
        email = profile.get('emails', {}).get('email', [{}])[0].get('email', f'{orcid_id}@orcid.org')
        user = User.objects.create_user(
            email=email,
            username=f'orcid_{orcid_id}',
            provider='orcid',
            provider_id=orcid_id
        )

    # Generate JWT tokens
    refresh = RefreshToken.for_user(user)
    tokens = {
        'refresh': str(refresh),
        'access': str(refresh.access_token)
    }

    # Redirect to frontend with tokens
    frontend_url = settings.FRONTEND_URL
    return redirect(f'{frontend_url}/auth/callback?tokens={jwt.encode(tokens, settings.SECRET_KEY)}')

================
File: core/asgi.py
================
"""
ASGI config for rag_ui_feedback project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'rag_ui_feedback.settings')

application = get_asgi_application()

================
File: core/settings.py
================
"""
Django settings for rag_ui_feedback project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-x+*yj$6h8nl+fyo3zfjv(%^*wimqxevxy(c4v3f$x#adu@i$@&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third party apps
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'corsheaders',

    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',

    # Local apps
    'authentication',
    'feedback',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'authentication.middleware.jwt_auth_middleware',
    'allauth.account.middleware.AccountMiddleware'
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    )
}



# CORS settings
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# JWT settings
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
}

# Custom user model
AUTH_USER_MODEL = 'authentication.User'

# Social Auth settings
SITE_ID = 1

# Google OAuth2 settings
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = 'your-google-client-id'
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = 'your-google-client-secret'
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [
    'https://www.googleapis.com/auth/userinfo.email',
    'https://www.googleapis.com/auth/userinfo.profile',
]

# ORCID OAuth2 settings
ORCID_CLIENT_ID = 'your-orcid-client-id'
ORCID_CLIENT_SECRET = 'your-orcid-client-secret'
ORCID_BASE_URL = 'https://orcid.org'
ORCID_AUTH_URL = f'{ORCID_BASE_URL}/oauth/authorize'
ORCID_TOKEN_URL = f'{ORCID_BASE_URL}/oauth/token'

================
File: core/urls.py
================
# core/urls.py
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/auth/', include('authentication.urls')),
    path('api/feedback/', include('feedback.urls')),
]

================
File: core/wsgi.py
================
"""
WSGI config for rag_ui_feedback project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'rag_ui_feedback.settings')

application = get_wsgi_application()

================
File: feedback/migrations/0001_initial.py
================
# Generated by Django 5.1.3 on 2024-11-29 13:05

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('search_term', models.CharField(max_length=255)),
                ('dataset', models.CharField(max_length=255)),
                ('feedback', models.CharField(choices=[('agree', 'Agree'), ('disagree', 'Disagree'), ('uncertain', 'Uncertain')], max_length=10)),
                ('comment', models.TextField(blank=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['search_term', 'dataset'], name='feedback_fe_search__ecd8e7_idx')],
                'unique_together': {('user', 'search_term', 'dataset')},
            },
        ),
    ]

================
File: feedback/migrations/0002_feedbackvote_alter_feedback_options_and_more.py
================
# Generated by Django 5.1.3 on 2024-11-29 13:52

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('feedback', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FeedbackVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_upvote', models.BooleanField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.AlterModelOptions(
            name='feedback',
            options={},
        ),
        migrations.RemoveIndex(
            model_name='feedback',
            name='feedback_fe_search__ecd8e7_idx',
        ),
        migrations.RenameField(
            model_name='feedback',
            old_name='timestamp',
            new_name='created_at',
        ),
        migrations.AlterUniqueTogether(
            name='feedback',
            unique_together=set(),
        ),
        migrations.AddField(
            model_name='feedback',
            name='feedback_type',
            field=models.CharField(choices=[('agree', 'Agree'), ('disagree', 'Disagree'), ('uncertain', 'Uncertain')], default=django.utils.timezone.now, max_length=20),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='feedback',
            name='is_public',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='feedback',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AlterField(
            model_name='feedback',
            name='dataset',
            field=models.CharField(max_length=100),
        ),
        migrations.AddField(
            model_name='feedbackvote',
            name='feedback',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='feedback.feedback'),
        ),
        migrations.AddField(
            model_name='feedbackvote',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.RemoveField(
            model_name='feedback',
            name='feedback',
        ),
        migrations.AlterUniqueTogether(
            name='feedbackvote',
            unique_together={('user', 'feedback')},
        ),
    ]

================
File: feedback/migrations/0003_alter_feedback_options_and_more.py
================
# Generated by Django 5.1.3 on 2024-11-29 14:06

from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('feedback', '0002_feedbackvote_alter_feedback_options_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='feedback',
            options={'ordering': ['-created_at']},
        ),
        migrations.AddIndex(
            model_name='feedback',
            index=models.Index(fields=['search_term', 'dataset'], name='feedback_fe_search__ecd8e7_idx'),
        ),
        migrations.AddIndex(
            model_name='feedback',
            index=models.Index(fields=['user', 'search_term', 'dataset'], name='feedback_fe_user_id_7126de_idx'),
        ),
    ]

================
File: feedback/migrations/0004_remove_feedback_updated_at_and_more.py
================
# Generated by Django 5.1.3 on 2024-11-29 14:23

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('feedback', '0003_alter_feedback_options_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RemoveField(
            model_name='feedback',
            name='updated_at',
        ),
        migrations.AlterField(
            model_name='feedback',
            name='feedback_type',
            field=models.CharField(choices=[('agree', 'Agree'), ('disagree', 'Disagree'), ('uncertain', 'Uncertain')], default='uncertain', max_length=20),
        ),
        migrations.AlterField(
            model_name='feedback',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='feedbackvote',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback_votes', to=settings.AUTH_USER_MODEL),
        ),
    ]

================
File: feedback/admin.py
================
from django.contrib import admin
from .models import Feedback

@admin.register(Feedback)
class FeedbackAdmin(admin.ModelAdmin):
    list_display = ('user', 'search_term', 'dataset', 'feedback_type', 'is_public', 'created_at')
    list_filter = ('is_public', 'created_at')
    search_fields = ('search_term', 'dataset', 'comment')
    date_hierarchy = 'created_at'

================
File: feedback/apps.py
================
from django.apps import AppConfig


class FeedbackConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'feedback'

================
File: feedback/models.py
================
# feedback/models.py
from django.db import models
from django.conf import settings

class Feedback(models.Model):
    FEEDBACK_TYPES = [
        ('agree', 'Agree'),
        ('disagree', 'Disagree'),
        ('uncertain', 'Uncertain'),
    ]

    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name='feedbacks'
    )
    search_term = models.CharField(max_length=255)
    dataset = models.CharField(max_length=100)
    feedback_type = models.CharField(
        max_length=20,
        choices=FEEDBACK_TYPES,
        default='uncertain'
    )
    comment = models.TextField(blank=True)
    is_public = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        indexes = [
            models.Index(fields=['search_term', 'dataset']),
            models.Index(fields=['user', 'search_term', 'dataset']),
        ]
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.user.username}'s feedback on {self.search_term}"

class FeedbackVote(models.Model):
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name='feedback_votes'
    )
    feedback = models.ForeignKey(
        Feedback,
        on_delete=models.CASCADE,
        related_name='votes'
    )
    is_upvote = models.BooleanField()
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ('user', 'feedback')

    def __str__(self):
        vote_type = "upvote" if self.is_upvote else "downvote"
        return f"{self.user.username}'s {vote_type} on {self.feedback}"

================
File: feedback/serializers.py
================
# feedback/serializers.py
from rest_framework import serializers
from django.contrib.auth import get_user_model
from .models import Feedback, FeedbackVote

User = get_user_model()

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ('id', 'username', 'email', 'avatar')

class FeedbackCreateSerializer(serializers.ModelSerializer):
    class Meta:
        model = Feedback
        fields = ('search_term', 'dataset', 'feedback_type', 'comment', 'is_public')

class FeedbackSerializer(serializers.ModelSerializer):
    user = UserSerializer(read_only=True)
    upvotes = serializers.SerializerMethodField()
    downvotes = serializers.SerializerMethodField()
    has_user_voted = serializers.SerializerMethodField()

    class Meta:
        model = Feedback
        fields = (
            'id', 'user', 'search_term', 'dataset', 'feedback_type',
            'comment', 'is_public', 'created_at', 'upvotes', 'downvotes',
            'has_user_voted'
        )
        read_only_fields = ('id', 'user', 'created_at', 'upvotes', 'downvotes', 'has_user_voted')

    def get_upvotes(self, obj):
        return obj.votes.filter(is_upvote=True).count()

    def get_downvotes(self, obj):
        return obj.votes.filter(is_upvote=False).count()

    def get_has_user_voted(self, obj):
        request = self.context.get('request')
        if not request or not request.user.is_authenticated:
            return None

        vote = obj.votes.filter(user=request.user).first()
        if not vote:
            return None

        return {
            'upvoted': vote.is_upvote,
            'downvoted': not vote.is_upvote
        }

================
File: feedback/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: feedback/urls.py
================
from django.urls import path
from . import views

urlpatterns = [
    path('submit/', views.submit_feedback, name='submit_feedback'),
    path('list/', views.get_feedback_list, name='get_feedback_list'),
    path('stats/', views.get_feedback_stats, name='get_feedback_stats'),
    path('vote/', views.vote_feedback, name='vote_feedback'),
]

================
File: feedback/views.py
================
# feedback/views.py
from allauth.headless.internal.authkit import purge_request_user_cache
from rest_framework import status
from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from django.db.models import Count
from .models import Feedback, FeedbackVote
from .serializers import FeedbackSerializer, FeedbackCreateSerializer


@api_view(['POST'])
@permission_classes([IsAuthenticated])
def submit_feedback(request):
    try:
        data = {
            # 'user': request.user.id,
            'search_term': request.data.get('searchTerm'),
            'dataset': request.data.get('dataset'),
            'feedback_type': request.data.get('feedback'),
            'comment': request.data.get('comment', ''),
            'is_public': request.data.get('isPublic', True)
        }

        # Check if user already submitted feedback for this search
        existing_feedback = Feedback.objects.filter(
            user=request.user,
            search_term=data['search_term'],
            dataset=data['dataset']
        ).first()

        if existing_feedback:
            serializer = FeedbackCreateSerializer(
                existing_feedback,
                data=data,
                partial=True
            )
        else:
            serializer = FeedbackCreateSerializer(data=data)

        if serializer.is_valid():
            feedback = serializer.save(user=request.user)
            return Response(
                FeedbackSerializer(feedback, context={'request': request}).data,
                status=status.HTTP_201_CREATED
            )
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    except Exception as e:
        print(f"Error in submit_feedback: {str(e)}")  # Debug print
        return Response(
            {'error': str(e)},
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )

@api_view(['GET'])
@permission_classes([])
def get_feedback_list(request):
    search_term = request.query_params.get('search')
    dataset = request.query_params.get('dataset')

    if not search_term or not dataset:
        return Response(
            {'error': 'Missing search term or dataset'},
            status=status.HTTP_400_BAD_REQUEST
        )

    feedbacks = Feedback.objects.filter(
        search_term=search_term,
        dataset=dataset,
        is_public=True
    ).order_by('-created_at')

    serializer = FeedbackSerializer(
        feedbacks,
        many=True,
        context={'request': request}
    )
    return Response(serializer.data)

@api_view(['GET'])
@permission_classes([])
def get_feedback_stats(request):
    search_term = request.query_params.get('search')
    dataset = request.query_params.get('dataset')

    if not search_term or not dataset:
        return Response(
            {'error': 'Missing search term or dataset'},
            status=status.HTTP_400_BAD_REQUEST
        )

    stats = Feedback.objects.filter(
        search_term=search_term,
        dataset=dataset
    ).values('feedback_type').annotate(
        count=Count('id')
    )

    result = {
        'agree': 0,
        'disagree': 0,
        'uncertain': 0,
        'total': 0
    }

    for item in stats:
        result[item['feedback_type']] = item['count']
        result['total'] += item['count']

    return Response(result)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def vote_feedback(request):
    try:
        feedback_id = request.data.get('feedbackId')
        is_upvote = request.data.get('isUpvote')

        feedback = Feedback.objects.get(id=feedback_id)

        # Check if user already voted
        existing_vote = FeedbackVote.objects.filter(
            user=request.user,
            feedback=feedback
        ).first()

        if existing_vote:
            if existing_vote.is_upvote == is_upvote:
                # Remove vote if clicking same button
                existing_vote.delete()
            else:
                # Change vote type if clicking different button
                existing_vote.is_upvote = is_upvote
                existing_vote.save()
        else:
            # Create new vote
            FeedbackVote.objects.create(
                user=request.user,
                feedback=feedback,
                is_upvote=is_upvote
            )

        # Return updated feedback
        serializer = FeedbackSerializer(
            feedback,
            context={'request': request}
        )
        return Response(serializer.data)

    except Feedback.DoesNotExist:
        return Response(
            {'error': 'Feedback not found'},
            status=status.HTTP_404_NOT_FOUND
        )
    except Exception as e:
        return Response(
            {'error': str(e)},
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )

================
File: django_project.json
================
[
  {"type":"directory","name":".","contents":[
    {"type":"directory","name":"authentication","contents":[
      {"type":"file","name":"__init__.py"},
      {"type":"directory","name":"__pycache__","contents":[
        {"type":"file","name":"__init__.cpython-311.pyc"},
        {"type":"file","name":"admin.cpython-311.pyc"},
        {"type":"file","name":"apps.cpython-311.pyc"},
        {"type":"file","name":"middleware.cpython-311.pyc"},
        {"type":"file","name":"models.cpython-311.pyc"},
        {"type":"file","name":"serializers.cpython-311.pyc"},
        {"type":"file","name":"urls.cpython-311.pyc"},
        {"type":"file","name":"views.cpython-311.pyc"}
      ]},
      {"type":"file","name":"admin.py"},
      {"type":"file","name":"apps.py"},
      {"type":"file","name":"middleware.py"},
      {"type":"directory","name":"migrations","contents":[
        {"type":"file","name":"0001_initial.py"},
        {"type":"file","name":"__init__.py"},
        {"type":"directory","name":"__pycache__","contents":[
          {"type":"file","name":"0001_initial.cpython-311.pyc"},
          {"type":"file","name":"__init__.cpython-311.pyc"}
        ]}
      ]},
      {"type":"file","name":"models.py"},
      {"type":"file","name":"serializers.py"},
      {"type":"file","name":"tests.py"},
      {"type":"file","name":"urls.py"},
      {"type":"file","name":"views.py"}
    ]},
    {"type":"directory","name":"core","contents":[
      {"type":"file","name":"__init__.py"},
      {"type":"directory","name":"__pycache__","contents":[
        {"type":"file","name":"__init__.cpython-311.pyc"},
        {"type":"file","name":"settings.cpython-311.pyc"},
        {"type":"file","name":"urls.cpython-311.pyc"},
        {"type":"file","name":"wsgi.cpython-311.pyc"}
      ]},
      {"type":"file","name":"asgi.py"},
      {"type":"file","name":"settings.py"},
      {"type":"file","name":"urls.py"},
      {"type":"file","name":"wsgi.py"}
    ]},
    {"type":"file","name":"db.sqlite3"},
    {"type":"file","name":"django_project.json"},
    {"type":"directory","name":"feedback","contents":[
      {"type":"file","name":"__init__.py"},
      {"type":"directory","name":"__pycache__","contents":[
        {"type":"file","name":"__init__.cpython-311.pyc"},
        {"type":"file","name":"admin.cpython-311.pyc"},
        {"type":"file","name":"apps.cpython-311.pyc"},
        {"type":"file","name":"models.cpython-311.pyc"},
        {"type":"file","name":"serializers.cpython-311.pyc"},
        {"type":"file","name":"urls.cpython-311.pyc"},
        {"type":"file","name":"views.cpython-311.pyc"}
      ]},
      {"type":"file","name":"admin.py"},
      {"type":"file","name":"apps.py"},
      {"type":"directory","name":"migrations","contents":[
        {"type":"file","name":"0001_initial.py"},
        {"type":"file","name":"0002_feedbackvote_alter_feedback_options_and_more.py"},
        {"type":"file","name":"0003_alter_feedback_options_and_more.py"},
        {"type":"file","name":"0004_remove_feedback_updated_at_and_more.py"},
        {"type":"file","name":"__init__.py"},
        {"type":"directory","name":"__pycache__","contents":[
          {"type":"file","name":"0001_initial.cpython-311.pyc"},
          {"type":"file","name":"0002_feedbackvote_alter_feedback_options_and_more.cpython-311.pyc"},
          {"type":"file","name":"0003_alter_feedback_options_and_more.cpython-311.pyc"},
          {"type":"file","name":"0004_remove_feedback_updated_at_and_more.cpython-311.pyc"},
          {"type":"file","name":"__init__.cpython-311.pyc"}
        ]}
      ]},
      {"type":"file","name":"models.py"},
      {"type":"file","name":"serializers.py"},
      {"type":"file","name":"tests.py"},
      {"type":"file","name":"urls.py"},
      {"type":"file","name":"views.py"}
    ]},
    {"type":"file","name":"manage.py"},
    {"type":"file","name":"project.json"},
    {"type":"file","name":"requirements.txt"},
    {"type":"directory","name":"templates"}
  ]}
,
  {"type":"report","directories":12,"files":60}
]

================
File: manage.py
================
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

================
File: project.json
================
[
  {"type":"directory","name":".","contents":[
    {"type":"directory","name":"authentication","contents":[
      {"type":"file","name":"__init__.py"},
      {"type":"directory","name":"__pycache__","contents":[
        {"type":"file","name":"__init__.cpython-311.pyc"},
        {"type":"file","name":"admin.cpython-311.pyc"},
        {"type":"file","name":"apps.cpython-311.pyc"},
        {"type":"file","name":"models.cpython-311.pyc"},
        {"type":"file","name":"serializers.cpython-311.pyc"},
        {"type":"file","name":"urls.cpython-311.pyc"},
        {"type":"file","name":"views.cpython-311.pyc"}
      ]},
      {"type":"file","name":"admin.py"},
      {"type":"file","name":"apps.py"},
      {"type":"directory","name":"migrations","contents":[
        {"type":"file","name":"__init__.py"},
        {"type":"directory","name":"__pycache__","contents":[
          {"type":"file","name":"__init__.cpython-311.pyc"}
        ]}
      ]},
      {"type":"file","name":"models.py"},
      {"type":"file","name":"serializers.py"},
      {"type":"file","name":"tests.py"},
      {"type":"file","name":"urls.py"},
      {"type":"file","name":"views.py"}
    ]},
    {"type":"directory","name":"core","contents":[
      {"type":"file","name":"__init__.py"},
      {"type":"directory","name":"__pycache__","contents":[
        {"type":"file","name":"__init__.cpython-311.pyc"},
        {"type":"file","name":"settings.cpython-311.pyc"},
        {"type":"file","name":"urls.cpython-311.pyc"},
        {"type":"file","name":"wsgi.cpython-311.pyc"}
      ]},
      {"type":"file","name":"asgi.py"},
      {"type":"file","name":"settings.py"},
      {"type":"file","name":"urls.py"},
      {"type":"file","name":"wsgi.py"}
    ]},
    {"type":"file","name":"db.sqlite3"},
    {"type":"directory","name":"feedback","contents":[
      {"type":"file","name":"__init__.py"},
      {"type":"directory","name":"__pycache__","contents":[
        {"type":"file","name":"__init__.cpython-311.pyc"},
        {"type":"file","name":"admin.cpython-311.pyc"},
        {"type":"file","name":"apps.cpython-311.pyc"},
        {"type":"file","name":"models.cpython-311.pyc"},
        {"type":"file","name":"serializers.cpython-311.pyc"},
        {"type":"file","name":"urls.cpython-311.pyc"},
        {"type":"file","name":"views.cpython-311.pyc"}
      ]},
      {"type":"file","name":"admin.py"},
      {"type":"file","name":"apps.py"},
      {"type":"directory","name":"migrations","contents":[
        {"type":"file","name":"__init__.py"},
        {"type":"directory","name":"__pycache__","contents":[
          {"type":"file","name":"__init__.cpython-311.pyc"}
        ]}
      ]},
      {"type":"file","name":"models.py"},
      {"type":"file","name":"serializers.py"},
      {"type":"file","name":"tests.py"},
      {"type":"file","name":"urls.py"},
      {"type":"file","name":"views.py"}
    ]},
    {"type":"file","name":"manage.py"},
    {"type":"file","name":"project.json"},
    {"type":"file","name":"requirements.txt"},
    {"type":"directory","name":"templates"}
  ]}
,
  {"type":"report","directories":12,"files":47}
]

================
File: requirements.txt
================
asgiref==3.8.1
certifi==2024.8.30
cffi==1.17.1
charset-normalizer==3.4.0
cryptography==43.0.3
defusedxml==0.8.0rc2
Django==5.1.3
django-cors-headers==4.3.1
djangorestframework==3.14.0
idna==3.10
oauthlib==3.2.2
psycopg2-binary==2.9.9
pycparser==2.22
PyJWT==2.8.0
python-dotenv==1.0.0
python3-openid==3.2.0
pytz==2024.2
requests==2.32.3
requests-oauthlib==2.0.0
rest-framework-simplejwt==0.0.2
social-auth-app-django==5.4.0
social-auth-core==4.5.4
sqlparse==0.5.2
urllib3==2.2.3
